[{"C:\\Users\\hhp12\\Desktop\\chat-app\\client\\src\\index.js":"1","C:\\Users\\hhp12\\Desktop\\chat-app\\client\\src\\App.js":"2","C:\\Users\\hhp12\\Desktop\\chat-app\\client\\src\\reportWebVitals.js":"3","C:\\Users\\hhp12\\Desktop\\chat-app\\client\\src\\pages\\sign.js":"4","C:\\Users\\hhp12\\Desktop\\chat-app\\client\\src\\pages\\coverpage.js":"5","C:\\Users\\hhp12\\Desktop\\chat-app\\client\\src\\pages\\homepage.js":"6","C:\\Users\\hhp12\\Desktop\\chat-app\\client\\src\\pages\\Coverpage.js":"7","C:\\Users\\hhp12\\Desktop\\chat-app\\client\\src\\actions\\index.js":"8","C:\\Users\\hhp12\\Desktop\\chat-app\\client\\src\\reducers\\index.js":"9","C:\\Users\\hhp12\\Desktop\\chat-app\\client\\src\\reducers\\cover_sign_language.js":"10","C:\\Users\\hhp12\\Desktop\\chat-app\\client\\src\\pages\\Sign.js":"11","C:\\Users\\hhp12\\Desktop\\chat-app\\client\\src\\pages\\Homepage.js":"12","C:\\Users\\hhp12\\Desktop\\chat-app\\client\\src\\pages\\index.js":"13","C:\\Users\\hhp12\\Desktop\\chat-app\\client\\src\\pages\\Demo.js":"14","C:\\Users\\hhp12\\Desktop\\chat-app\\client\\src\\pages\\components\\Card.js":"15","C:\\Users\\hhp12\\Desktop\\chat-app\\client\\src\\pages\\components\\ChatPanel.js":"16","C:\\Users\\hhp12\\Desktop\\chat-app\\client\\src\\pages\\components\\Setting.js":"17","C:\\Users\\hhp12\\Desktop\\chat-app\\client\\src\\pages\\components\\Language.js":"18","C:\\Users\\hhp12\\Desktop\\chat-app\\client\\src\\pages\\components\\Background.js":"19","C:\\Users\\hhp12\\Desktop\\chat-app\\client\\src\\pages\\components\\Password.js":"20"},{"size":759,"mtime":1607804288766,"results":"21","hashOfConfig":"22"},{"size":641,"mtime":1609082178145,"results":"23","hashOfConfig":"22"},{"size":362,"mtime":499162500000,"results":"24","hashOfConfig":"22"},{"size":536,"mtime":1607804568956,"results":"25","hashOfConfig":"22"},{"size":2279,"mtime":1607739038776,"results":"26","hashOfConfig":"22"},{"size":195,"mtime":1607805106118,"results":"27","hashOfConfig":"22"},{"size":3709,"mtime":1608741331528,"results":"28","hashOfConfig":"22"},{"size":115,"mtime":1607785983421,"results":"29","hashOfConfig":"22"},{"size":229,"mtime":1607786503150,"results":"30","hashOfConfig":"22"},{"size":184,"mtime":1607787108468,"results":"31","hashOfConfig":"22"},{"size":9108,"mtime":1609210605979,"results":"32","hashOfConfig":"22"},{"size":15579,"mtime":1609211061807,"results":"33","hashOfConfig":"22"},{"size":165,"mtime":1609102271771,"results":"34","hashOfConfig":"22"},{"size":26148,"mtime":1609097932885,"results":"35","hashOfConfig":"22"},{"size":1728,"mtime":1609115336391,"results":"36","hashOfConfig":"22"},{"size":1272,"mtime":1609116561695,"results":"37","hashOfConfig":"22"},{"size":962,"mtime":1609116229702,"results":"38","hashOfConfig":"22"},{"size":7825,"mtime":1609116024532,"results":"39","hashOfConfig":"22"},{"size":992,"mtime":1609116272370,"results":"40","hashOfConfig":"22"},{"size":1063,"mtime":1609116348284,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"ta1r0d",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":1,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":1,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"44"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"44"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"44"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"C:\\Users\\hhp12\\Desktop\\chat-app\\client\\src\\index.js",[],["88","89"],"C:\\Users\\hhp12\\Desktop\\chat-app\\client\\src\\App.js",[],"C:\\Users\\hhp12\\Desktop\\chat-app\\client\\src\\reportWebVitals.js",[],"C:\\Users\\hhp12\\Desktop\\chat-app\\client\\src\\pages\\sign.js",["90","91","92","93","94","95","96","97","98"],"C:\\Users\\hhp12\\Desktop\\chat-app\\client\\src\\pages\\coverpage.js",["99","100","101"],"C:\\Users\\hhp12\\Desktop\\chat-app\\client\\src\\pages\\homepage.js",[],["102","103"],"C:\\Users\\hhp12\\Desktop\\chat-app\\client\\src\\pages\\Coverpage.js",[],"C:\\Users\\hhp12\\Desktop\\chat-app\\client\\src\\actions\\index.js",[],["104","105"],"C:\\Users\\hhp12\\Desktop\\chat-app\\client\\src\\reducers\\index.js",[],"C:\\Users\\hhp12\\Desktop\\chat-app\\client\\src\\reducers\\cover_sign_language.js",[],"C:\\Users\\hhp12\\Desktop\\chat-app\\client\\src\\pages\\Sign.js",["106"],"import React, {useState} from 'react';\r\nimport {Link} from 'react-router-dom'\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport './css/sign.css'\r\nimport { Button, Form, FormGroup, Input, Modal, ModalHeader } from 'reactstrap';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport {cover_sign_language} from '../actions'\r\nimport Particles from 'react-particles-js';\r\nimport { Alert } from 'reactstrap';\r\nimport { Redirect } from \"react-router\";\r\nimport axios from 'axios';\r\nimport jwt from 'jsonwebtoken';\r\nconst secret = 'hhp';\r\n\r\nfunction Sign() {\r\n    const language = useSelector(state=>state.cover_sign_language);\r\n    const [state, setState] = useState('login');\r\n    const [popup, setPopup] = useState(false);\r\n    const [msg, setMsg] = useState('');\r\n    let id = '';\r\n    function verify_token(){\r\n        var token = localStorage.getItem('jwt_token');\r\n        if(!token) return false\r\n        try {\r\n            id = jwt.verify(token, secret).id;\r\n        } catch (error) {\r\n            return false\r\n        }\r\n        return false\r\n    }\r\n    const [redirect,setRedirect] = useState(verify_token());\r\n    const dispatch = useDispatch();\r\n    \r\n    \r\n\r\n    function Japn(msg){\r\n        switch(msg){\r\n            case 'Please fill out all fields':\r\n                return 'すべてのフィールドに入力してください'\r\n            case 'Please use valid email address':\r\n                return '有効なメールアドレスを使ってください'\r\n            case 'Your password must be 8 characters or more':\r\n                return 'パスワードは8文字以上である必要があります'\r\n            case 'Two passwords mismatch with each other':\r\n                return '二つのパスワードは一致していません'\r\n            case 'This email has already been registered':\r\n                return 'このメールはすでに登録されています'\r\n            case 'User does not exist':\r\n                return 'ユーザーは存在しません'\r\n            case 'Wrong password':\r\n                return 'パスワードが間違っています'\r\n            \r\n            default:\r\n                \r\n        }\r\n    }\r\n\r\n    async function register(){\r\n        const result = await axios({\r\n            method: 'post',\r\n            url: '/api/users',\r\n            data: {\r\n                confirm: document.getElementById('confirm').value,\r\n                email: document.getElementById('email').value,\r\n                password: document.getElementById('password').value,\r\n              }\r\n        });\r\n        const {msg, token} = result.data;\r\n        if(msg){\r\n            setMsg(language==='English'?msg:Japn(msg))\r\n        } else {\r\n            localStorage.setItem('jwt_token', token)\r\n            setRedirect(true)\r\n        }\r\n        \r\n    }\r\n    async function login(){\r\n        const result = await axios({\r\n            method: 'post',\r\n            url: '/api/auth',\r\n            data: {\r\n                email: document.getElementById('email').value,\r\n                password: document.getElementById('password').value,\r\n            }\r\n        });\r\n        const {msg, token} = result.data;\r\n        if(msg){\r\n            setMsg(language==='English'?msg:Japn(msg))\r\n        } else {\r\n            localStorage.setItem('jwt_token', token)\r\n            setRedirect(true)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"bg\" style={{height: '100vh', overflow: 'hidden' }}>\r\n           \r\n           <Particles\r\n                params={{\r\n                    \"particles\": {\r\n                        \"number\": {\r\n                            \"value\": 160,\r\n                            \"density\": {\r\n                                \"enable\": false\r\n                            }\r\n                        },\r\n                        \"color\":{\r\n                            \"value\": [\"#BD10E0\",\"#B8E986\",\"#50E3C2\",\"#FFD300\",\"#E86363\"]\r\n                        },\r\n                        \"size\": {\r\n                            \"value\": 8,\r\n                            \"random\": true,\r\n                            \"anim\": {\r\n                                \"speed\": 5,\r\n                                \"size_min\": 1\r\n                            }\r\n                        },\r\n                        \"opacity\": {\r\n                            \"value\": 1\r\n                        },\r\n                        \"line_linked\": {\r\n                            \"enable\": false\r\n                        },\r\n                        \"move\": {\r\n                            \"random\": true,\r\n                            \"speed\": 1,\r\n                            \"direction\": \"none\",\r\n                            \"out_mode\": \"out\"\r\n                        }\r\n                    },\r\n                    \"interactivity\": {\r\n                        \"events\": {\r\n                            \"onhover\": {\r\n                                \"enable\": true,\r\n                                \"mode\": \"bubble\"\r\n                            },\r\n                            \"onclick\": {\r\n                                \"enable\": true,\r\n                                \"mode\": \"repulse\"\r\n                            }\r\n                        },\r\n                        \"modes\": {\r\n                            \"bubble\": {\r\n                                \"distance\": 250,\r\n                                \"duration\": 2,\r\n                                \"size\": 0,\r\n                                \"opacity\": 0\r\n                            },\r\n                            \"repulse\": {\r\n                                \"distance\": 400,\r\n                                \"duration\": 4\r\n                            }\r\n                        }\r\n                    }\r\n                }} />\r\n            \r\n          <div\r\n            style={{\r\n              position: \"absolute\",\r\n              top: 0,\r\n              left: 0,\r\n              width: \"100%\",\r\n              height: \"100%\",\r\n              overflow: 'hidden',\r\n              \r\n            }}\r\n          >\r\n              \r\n              <Form className='form' autoComplete={'off'} >\r\n                <div className='option'>\r\n                    <button className='login' onClick={(e)=>{e.preventDefault();setState('login')}} style={{color: state==='login'? 'black': '#888'}}>{language==='English'? 'login': 'ログイン'}</button>\r\n                    <button className='signup' onClick={(e)=>{e.preventDefault();setState('signup')}} style={{color: state==='signup'? 'black': '#888'}}>{language==='English'? 'sign up': 'サインアップ'}</button>\r\n                </div>\r\n                {state==='login'? \r\n                    <FormGroup className='content'>\r\n                        <Input type=\"email\" name=\"email\" id=\"email\" placeholder={language==='English'? \"email address\": '電子メールアドレス'} />\r\n                        <Input type=\"password\" name=\"password\" id=\"password\" placeholder={language==='English'? \"password\": 'パスワード'} />\r\n                        <Button outline color=\"success\" id='submit' onClick={login}>{language==='English'? 'login': 'ログイン'}</Button>\r\n                    </FormGroup> :\r\n                    <FormGroup className='content'>\r\n                        <Input type=\"email\" name=\"email\" id=\"email\" placeholder={language==='English'? \"email address\": '電子メールアドレス'} />\r\n                        <Input type=\"password\" name=\"password\" id=\"password\" placeholder={language==='English'? \"password\": 'パスワード'} />\r\n                        <Input type=\"password\" name=\"confirm\" id=\"confirm\" placeholder={language==='English'? \"confrim password\": 'パスワード確認'} />\r\n                        <Button id='submit'outline color=\"success\" onClick={register}>{language==='English'? 'register': '登録'}</Button>\r\n                    </FormGroup>            \r\n                }\r\n                {redirect? <Redirect to={'/homepage'}></Redirect>: ''}\r\n                <Link to={'/'}><Button outline color=\"info\" className='back'>{language==='English'? 'back': '戻る'}</Button></Link><Button outline color=\"secondary\" className='language' onClick={()=>{setPopup(true)}}>{language==='English'? 'language': '言語'}</Button> \r\n              </Form>\r\n              {msg? \r\n                    <Alert className='msg' id='msg' color=\"danger\">\r\n                        {msg}\r\n                    </Alert>: ''}\r\n                \r\n        </div>\r\n        <Modal isOpen={popup}>\r\n            <ModalHeader toggle={()=>{setPopup(!popup); }}>{language===\"English\"? 'Please choose your language': '言語を選んでください'}</ModalHeader>\r\n            <Input type=\"select\" name=\"backdrop\" id=\"backdrop\" onChange={(e)=>{dispatch(cover_sign_language(e.target.value)); setPopup(!popup);}}>\r\n                <option value={language}>{language===\"English\"? 'Options...': '選択肢...'}</option>\r\n                <option value=\"English\">English</option>\r\n                <option value=\"Japanese\">日本語</option>\r\n            </Input>\r\n            \r\n        </Modal>\r\n        \r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Sign;","C:\\Users\\hhp12\\Desktop\\chat-app\\client\\src\\pages\\Homepage.js",["107","108","109","110","111","112","113","114","115"],"import React ,{useState, useEffect}from 'react';\r\nimport './css/homepage.css'\r\nimport { FaCog, FaComment, FaUserFriends, FaUserCircle, FaSignOutAlt, FaPlus, FaSearch, FaCheck, FaTimes,  FaCircle, FaAcquisitionsIncorporated } from 'react-icons/fa';\r\nimport {Link} from 'react-router-dom'\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport { InputGroup, InputGroupAddon, InputGroupText, Input, Button, Modal,  ModalFooter, ModalHeader} from 'reactstrap';\r\nimport {cover_sign_language} from '../actions'\r\nimport axios from 'axios'\r\nimport io from 'socket.io-client'\r\n\r\nimport jwt from 'jsonwebtoken';\r\nimport Card from './components/Card'\r\nimport Setting from './components/Setting'\r\nimport Language from './components/Language'\r\nimport ChatPanel from './components/ChatPanel'\r\nimport Background from './components/Background'\r\nimport Password from './components/Password'\r\n\r\n\r\nimport road from './homepage-bg/road.jpg'\r\nimport sakura from './homepage-bg/sakura.jpg'\r\nimport sea from './homepage-bg/sea.jpg'\r\nimport city from './homepage-bg/city.jpg'\r\nimport forest from './homepage-bg/forest.jpg'\r\nimport prairie from './homepage-bg/prairie.jpg'\r\nimport bridge from './homepage-bg/bridge.jpg'\r\nimport aurora from './homepage-bg/aurora.jpg'\r\nimport universe from './others/universe.jpg'\r\n\r\nlet  socket;\r\nlet mounted = false\r\nfunction Homepage() {\r\n    if(!mounted){\r\n        mounted = true\r\n        let id;\r\n        var token = localStorage.getItem('jwt_token');\r\n        if(!token) {\r\n            window.location.href = '/'\r\n        }\r\n        try {\r\n            id = jwt.verify(token, 'hhp').id;\r\n        } catch (error) {\r\n            window.location.href = '/'\r\n        }\r\n        \r\n\r\n        axios({\r\n            method: 'get',\r\n            url: '/api/users',\r\n        }).then(dough=>{\r\n            // icon unhandled\r\n            setAllUsers(dough.data);\r\n            let obj = dough.data.filter(user=>user._id===id)[0];\r\n            const {friends, preference, requestReceived, chatReceived, description\r\n                , icon, requestSent, name, email} = obj;\r\n            const language = preference.split('@')[0];\r\n            const background = preference.split('@')[1];\r\n            setFriends(friends); setRequestReceived(requestReceived); setDescription(description);\r\n            setRequestSent(requestSent); setName(name); setEmail(email);\r\n            setBackground(background); dispatch(cover_sign_language(language));\r\n            setSearchRes(dough.data);setRequestEle(renderRequest())\r\n            setChatList(renderChatList())\r\n            \r\n            socket = io();\r\n            socket.emit('join', name);\r\n            socket.on('receiveRequest', (name)=>{\r\n                // setRequestReceived([...requestReceived, name])\r\n                console.log('I hate you')\r\n            });\r\n            socket.on('requestFailed', (opponent)=>{\r\n                console.log('failed')\r\n                updateDbRequest(name, opponent);\r\n            })\r\n        });\r\n    }\r\n    const [active, setActive] = useState('chat');\r\n    const [width, setWidth] = useState(window.innerWidth);\r\n    const [mobile_state, setMobileState] = useState('chat');\r\n    const [lastUser, setLastUser] = useState(null);\r\n    const dispatch = useDispatch();\r\n    const language = useSelector(state=>state.cover_sign_language);\r\n    const [logoutWindow, setLogoutWindow] = useState(false);\r\n    const [friendWindow, setFriendWindow] = useState(false);\r\n\r\n   \r\n    \r\n    // wait for api \r\n    const [background, setBackground] = useState('Universe');\r\n    const [friends, setFriends] = useState([]);\r\n    const [requestReceived, setRequestReceived] = useState([]);\r\n    const [description, setDescription] = useState('');\r\n    const [name, setName] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [allUsers, setAllUsers] = useState([]);\r\n    const [requestSent, setRequestSent] = useState([]);\r\n   \r\n\r\n\r\n    const [searchRes, setSearchRes] = useState(allUsers);\r\n    const [chatList, setChatList] = useState(renderChatList(null));\r\n    const [right, setRight] = useState('Chat');\r\n    const [requestEle, setRequestEle] = useState(renderRequest());\r\n    window.addEventListener(\"resize\", function () {\r\n        setWidth(window.innerWidth);\r\n    })\r\n    function renderChatList(str){\r\n        \r\n        if(str) {\r\n            const regex = new RegExp(`^${str}`, 'gi');\r\n            const temp = friends.filter(user=>user[0].match(regex))\r\n            if(temp.length === 0) return(<h5 style={{width: '100%', textAlign: \"center\", color: 'lightgray', marginTop: '10px'}}>No results</h5>)\r\n            return (temp.map(user=> (<div id={user[0]} key={user[0]} className='chat-list-item' onClick={()=>{\r\n                    setLastUser(user); setActive('chat')\r\n                }}>\r\n                    <div id={user[0] + \"'s photo\" } className='photo'></div>\r\n                    {/* <span></span> */}\r\n                    <div style={{marginLeft: '10px', marginTop: '5px'}}>\r\n                        <h4>{user[0]}</h4>\r\n                        <h6>{user[user.length-1].msg.length>22?user[user.length-1].msg.substring(0,20)+'...': user[user.length-1].msg}</h6>\r\n                    </div>\r\n                </div>)\r\n            ))\r\n        }\r\n        return (friends.map(user=>{\r\n            return (<div id={user[0]} key={user[0]} className='chat-list-item' onClick={()=>{\r\n                 setActive('chat');setLastUser(user);\r\n                \r\n                }}>\r\n                <div id={user[0] + \"'s photo\" } className='photo'></div>\r\n                {/* <span></span> */}\r\n                <div style={{marginLeft: '10px', marginTop: '2px'}}>\r\n                    <h4 style={{width: '100%'}}>{user[0]} </h4>\r\n                    <h6 style={{cursor: 'context-menu'}}>{user[user.length-1].msg.length>22?user[user.length-1].msg.substring(0,20)+'...': user[user.length-1].msg}</h6>\r\n                </div>\r\n            </div>)\r\n        }))\r\n    }\r\n    \r\n    \r\n\r\n    \r\n    \r\n    function requestAnswered(user, isFriend){\r\n        const index = requestReceived.findIndex(name=>user===name);\r\n        requestReceived.splice(index, 1);\r\n        setRequestEle(renderRequest())\r\n        if(isFriend){\r\n            console.log(requestReceived.length)\r\n        } \r\n    }\r\n    function renderRequest(){\r\n\r\n        if(!requestReceived.length){\r\n            return(<h6 style={{width: '100%', textAlign: \"center\", color: '#aaa', marginTop: '10px'}}>No results</h6>)\r\n        }\r\n        return (requestReceived.map(user=>(\r\n            <div key={'request'+user}style={{ paddingLeft: '30px',  borderTop: 'white 1px solid', height: '42px'}}>\r\n                <span style={{fontSize: '20px', position: 'relative'}}>{user} </span>\r\n                <button onClick={()=>{requestAnswered(user, false)}} className='no'  color='info' style={{color: 'red',  background: 'transparent', float: 'right', marginLeft: '10px', border: 'none'}}><FaTimes size={'20px'}/></button >\r\n                <button onClick={()=>{requestAnswered(user, true)}} className='yes'  color=\"info\" style={{color: 'green', background: 'transparent', float: 'right', border: 'none'}}><FaCheck size={'20px'}/></button > \r\n            </div>))\r\n        )\r\n    }\r\n    function switch_to_chat(){\r\n        setRight('Chat');\r\n    }\r\n    function hashBg(photo){\r\n        switch(photo){\r\n            case'Universe':\r\n                return universe\r\n            case'Aurora':\r\n                return aurora\r\n            case'Bridge':\r\n                return bridge\r\n            case'City':\r\n                return city\r\n            case'Forest':\r\n                return forest\r\n            case'Prairie':\r\n                return prairie\r\n            case'Road':\r\n                return road\r\n            case'Sakura':\r\n                return sakura\r\n            case'Sea':\r\n                return sea\r\n            default: \r\n        }\r\n    }\r\n    \r\n    function switch_to_setting(){\r\n        setRight('Setting');\r\n        \r\n    }\r\n\r\n    const goTo = (str)=>{\r\n        setRight(str)\r\n    }\r\n\r\n    const back = ()=>{\r\n        setRight('Setting')\r\n    }\r\n\r\n    const setLanguage= (str)=>{\r\n        dispatch(cover_sign_language(str))\r\n    }\r\n\r\n    function updateDbRequest(myName, hisName){\r\n        axios.post('/api/users/add', {\r\n            params: {\r\n              myName, hisName\r\n            }\r\n          }).then(()=>{\r\n              setRequestSent([...requestSent, hisName])\r\n          })\r\n    }\r\n\r\n    return (\r\n        <div className='homepage' style={background?{backgroundImage: `url(${hashBg(background)})`}: {background: 'lightgray'}}>\r\n            <div className='shadow'></div>\r\n            \r\n            {width>=800?\r\n                (<div className='chat-window'> \r\n                    <nav className='navbar'>\r\n                        <button onClick={switch_to_chat} className='chat-btn' id='chat'><FaComment size={28} style={{color: right==='Chat'? 'rgb(91, 226, 79)': ''}}/></button>\r\n                        <button onClick={switch_to_setting} className='chat-btn' id='setting'><FaCog size={28} style={{color: right!=='Chat'? 'rgb(91, 226, 79)': ''}}/></button>\r\n                        <button onClick={()=>{setRight('Setting');setLogoutWindow(!logoutWindow); }} className='chat-btn' id='logout'><FaSignOutAlt size={28} /></button>\r\n                    </nav>\r\n                    \r\n                    <div className='main-interface'>\r\n                        <div className='middle'>\r\n                            <div className='mid-header'>\r\n                                <InputGroup className='search-container'>\r\n                                    <InputGroupAddon addonType=\"prepend\">\r\n                                        <InputGroupText><FaSearch size={16}/></InputGroupText>\r\n                                    </InputGroupAddon>\r\n                                    <Input className='search' placeholder=\"Search\" onChange={(e)=>{setChatList(renderChatList(e.target.value))}}/>\r\n                                </InputGroup>\r\n                                <button onClick={()=>{setRight('Setting');setFriendWindow(!friendWindow);}} className='chat-btn' id='w-add'><FaPlus size={28} /></button>\r\n\r\n                            </div>\r\n                            <div style={{height: '88%', overflow: 'scroll', overflowX: 'hidden'}}>\r\n                                <div style={{borderBottom: 'white 1px solid'}}>\r\n                                    <h5 style={{textAlign: 'center'}}>Friend Request</h5>\r\n                                    {requestEle}\r\n                                    <br></br>\r\n                                </div>\r\n                                \r\n                                {chatList}\r\n                            </div>\r\n                        </div>\r\n                        <div className='right'>\r\n                            {right === 'Chat'?<ChatPanel user={lastUser} />:\r\n                                right === 'Setting'? <Setting goTo={goTo}/>:\r\n                                right === 'Language'? <Language back={back} language={language} setLanguage={setLanguage}/>:\r\n                                right === 'Card'? <Card back={back}/>:\r\n                                right === 'Background'? <Background back={back} setBackground={setBackground}/>:\r\n                                <Password back={back}/>\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>): \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                // mobile screen\r\n                <div className='chat-mobile'>\r\n                    <div className='m-header'>\r\n                        <button className='chat-btn' id='m-add'><FaPlus size={28} /></button>\r\n                    </div>\r\n                    <div className='m-content'>\r\n                        {mobile_state==='chat'?\r\n                            <div className='part'>1</div>:\r\n                            mobile_state==='friends'?\r\n                            <div className='part'>2</div>:\r\n                            <div className='part'>3</div>\r\n                        }\r\n                        {/* <CSSTransition\r\n                            in={mobile_state === 'chat'}\r\n                            timeout={500}\r\n                            classNames=\"menu-primary\"\r\n                            unmountOnExit>\r\n                                <div className='part'>1</div>\r\n                        </CSSTransition>\r\n                        <CSSTransition\r\n                            in={mobile_state === 'friends'}\r\n                            timeout={500}\r\n                            classNames=\"menu-secondary\"\r\n                            unmountOnExit>\r\n                                <div className='part'>2</div>\r\n                        </CSSTransition> */}\r\n                    </div>\r\n                    <div className='m-navbar'>\r\n                        <button onClick={()=>{setMobileState('chat')}} className='chat-btn' id='chat'><FaComment size={28} style={{color: active==='chat'? 'rgb(91, 226, 79)': ''}}/></button>\r\n                        <button onClick={()=>{setMobileState('friends')}} className='chat-btn' id='friends'><FaUserFriends size={28} style={{color: active==='friends'? 'rgb(91, 226, 79)': ''}}/></button>\r\n                        <button onClick={()=>{setMobileState('file')}} className='chat-btn' id='profile'><FaUserCircle size={28} style={{'color':'white'}}/></button>\r\n                    </div>\r\n                </div>\r\n            }\r\n            \r\n            <Modal isOpen={logoutWindow} toggle={()=>{setLogoutWindow(!logoutWindow)}} style={{position: 'relative', top: '100px'}}>\r\n                <ModalHeader style={{textAlign: 'center'}} >You want to log out now?</ModalHeader>\r\n                \r\n                <ModalFooter>\r\n                    <Button color=\"primary\" onClick={()=>{setLogoutWindow(!logoutWindow)}}>Confirm</Button>\r\n                    <Button color=\"secondary\" onClick={()=>{setLogoutWindow(!logoutWindow)}}>Cancel</Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n            <Modal isOpen={friendWindow} toggle={()=>{setFriendWindow(!friendWindow)}} style={{position: 'relative', top: '100px', width: '300px'}}>\r\n                <ModalHeader style={{textAlign: 'center'}} >Search user by name</ModalHeader>\r\n                <Input type='text' style={{width: '90%', marginLeft: '10px', marginTop: '5px'}} onChange={(e)=>{\r\n                    console.log(allUsers)\r\n                    const regex = new RegExp(`^${e.target.value}`, 'gi');\r\n                    setSearchRes(allUsers.filter(user=>user.name.match(regex)));\r\n                }}></Input>\r\n                <p style={{paddingLeft: '5px'}}>Notice: Your friends and users you have sent request will not be displayed here</p>\r\n                <div style={{height: '200px', overflow: 'scroll'}}>\r\n                    {searchRes.map(user=>user.name).filter(user=>!friends.includes(user)&&!requestSent.includes(user)&&user!==name).map(user=><div key={'add_'+user} style={{height: '50px', paddingTop: '5px'}}>\r\n                        <span style={{fontSize: '20px', marginLeft: '10px', marginTop: '3px'}}>{user}</span>\r\n                        <Button onClick={()=>{console.log(socket.emit('sendRequest', user));}} outline color='info' style={{float: 'right', marginRight: '5px'}}>send</Button>\r\n                    </div>)}\r\n                </div>\r\n                \r\n            </Modal>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Homepage;","C:\\Users\\hhp12\\Desktop\\chat-app\\client\\src\\pages\\index.js",[],"C:\\Users\\hhp12\\Desktop\\chat-app\\client\\src\\pages\\Demo.js",["116","117","118","119","120","121","122"],"import React ,{useState, useEffect}from 'react';\r\nimport './css/homepage.css'\r\nimport { FaUserSlash,FaEdit,FaArrowAltCircleLeft,FaCog, FaComment, FaUserFriends, FaUserCircle, FaSignOutAlt, FaPlus, FaSearch, FaCheck, FaTimes, FaLanguage, FaKey, FaImage, FaCircle, FaAcquisitionsIncorporated } from 'react-icons/fa';\r\nimport {Link} from 'react-router-dom'\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport { InputGroup, InputGroupAddon, InputGroupText, Input, Button, Modal,  ModalFooter, ModalHeader} from 'reactstrap';\r\nimport {cover_sign_language} from '../actions'\r\nimport axios from 'axios'\r\n\r\nimport road from './homepage-bg/road.jpg'\r\nimport sakura from './homepage-bg/sakura.jpg'\r\nimport sea from './homepage-bg/sea.jpg'\r\nimport city from './homepage-bg/city.jpg'\r\nimport forest from './homepage-bg/forest.jpg'\r\nimport prairie from './homepage-bg/prairie.jpg'\r\nimport bridge from './homepage-bg/bridge.jpg'\r\nimport aurora from './homepage-bg/aurora.jpg'\r\nfunction Demo() {\r\n    const [active, setActive] = useState('chat');\r\n    const [width, setWidth] = useState(window.innerWidth);\r\n    const [mobile_state, setMobileState] = useState('chat');\r\n    const [lastUser, setLastUser] = useState(null);\r\n    const dispatch = useDispatch();\r\n    const language = useSelector(state=>state.cover_sign_language);\r\n    const bg_photo = ['Aurora', 'Bridge', 'City', 'Forest', 'Prairie', 'Road', 'Sakura', 'Sea'];\r\n    const [logoutWindow, setLogoutWindow] = useState(false);\r\n    const [friendWindow, setFriendWindow] = useState(false);\r\n    // wait for api \r\n    const requestReceived = ['Jack', 'Bob'];\r\n    const history = [\r\n        ['Alice', {me: false, msg: 'hello'}, {me: true, msg: 'world'}],\r\n        ['Bard', {me: false, msg: 'hello2'}, {me: true, msg: 'world2'}]\r\n    ];\r\n    const friends = ['Alice', 'Bard'];\r\n    const allUsers = ['Alice', 'Bard', 'Candy', 'David', 'Emily'];\r\n    const [background, setBackground] = useState('Sakura');\r\n    const requestSent = [];\r\n    \r\n    const [res, setRes] = useState(allUsers);\r\n    const [chatList, setChatList] = useState(renderChatList(null));\r\n    const [chatPanel, setChatPanel] = useState(renderChatPanel(lastUser));\r\n    const [requestEle, setRequestEle] = useState(renderRequest());\r\n    window.addEventListener(\"resize\", function () {\r\n        setWidth(window.innerWidth);\r\n    })\r\n    function renderChatList(str){\r\n        \r\n        if(str) {\r\n            const regex = new RegExp(`^${str}`, 'gi');\r\n            const temp = history.filter(user=>user[0].match(regex))\r\n            if(temp.length === 0) return(<h5 style={{width: '100%', textAlign: \"center\", color: 'lightgray', marginTop: '10px'}}>No results</h5>)\r\n            return (temp.map(user=> (<div id={user[0]} key={user[0]} className='chat-list-item' onClick={()=>{\r\n                    setLastUser(user);setChatPanel(renderChatPanel(user));  setActive('chat')\r\n                }}>\r\n                    <div id={user[0] + \"'s photo\" } className='photo'></div>\r\n                    {/* <span></span> */}\r\n                    <div style={{marginLeft: '10px', marginTop: '5px'}}>\r\n                        <h4>{user[0]}</h4>\r\n                        <h6>{user[user.length-1].msg.length>22?user[user.length-1].msg.substring(0,20)+'...': user[user.length-1].msg}</h6>\r\n                    </div>\r\n                </div>)\r\n            ))\r\n        }\r\n        return (history.map(user=>{\r\n            return (<div id={user[0]} key={user[0]} className='chat-list-item' onClick={()=>{\r\n                 setActive('chat');setLastUser(user);setChatPanel(renderChatPanel(user)); \r\n                \r\n                }}>\r\n                <div id={user[0] + \"'s photo\" } className='photo'></div>\r\n                {/* <span></span> */}\r\n                <div style={{marginLeft: '10px', marginTop: '2px'}}>\r\n                    <h4 style={{width: '100%'}}>{user[0]} </h4>\r\n                    <h6 style={{cursor: 'context-menu'}}>{user[user.length-1].msg.length>22?user[user.length-1].msg.substring(0,20)+'...': user[user.length-1].msg}</h6>\r\n                </div>\r\n            </div>)\r\n        }))\r\n    }\r\n    function renderChatPanel(user){\r\n        if(!user){\r\n            return (\r\n                <h2 style={{position:'relative', top: '45%', width: '100%',  textAlign: 'center'}}>Click to start</h2>\r\n            )\r\n        }\r\n        const username = user[0];\r\n        const hist_array = user;\r\n        return (\r\n            <div className='chat-panel' style={{height: '100%'}}>\r\n                <h3 style={{width: '100%', height: '10%', paddingTop: '15px', paddingLeft: '25px'}}>\r\n                    {username}\r\n                    <button className='chat-btn' id='more'><FaUserCircle/></button>\r\n                </h3>\r\n                \r\n                <div style={{width: '100%', height: '70%', borderTop: 'white 1px solid',borderBottom: 'white 1px solid', listStyleType: 'none', paddingTop: '10px', overflow: 'scroll'}}>\r\n                    {hist_array.map(msg=>msg.me?<li key={'li_' + msg.me + msg.msg+username} className='my_msg'>{msg.msg}</li>: msg.msg?<li className='their_msg'>{msg.msg}</li>:'')}\r\n                    \r\n                </div>\r\n                <div style={{width: '100%', height: '20%'}}> \r\n                    <textarea />\r\n                    <button className='send-btn'>send</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    \r\n\r\n    \r\n    function renderSetting(){\r\n        return (\r\n            \r\n            <div style={{display: 'flex', flexDirection: 'column'}}>\r\n                <Button onClick={()=>{setChatPanel(renderFile()); }} className='setting-btn'><FaUserCircle size={'28px'}/> <span style={{marginLeft: '20px'}}>My Card</span></Button>\r\n                <Button onClick={()=>{setChatPanel(renderLanguage()); }} className='setting-btn'><FaLanguage size={'28px'} /><span style={{marginLeft: '20px'}}>Language</span></Button>\r\n                <Button onClick={()=>{setChatPanel(renderPassword()); }} className='setting-btn'><FaKey size={'28px'}/> <span style={{marginLeft: '20px'}}>Password</span></Button>\r\n                <Button onClick={()=>{setChatPanel(renderBackground()); }} className='setting-btn'><FaImage size={'28px'}/> <span style={{marginLeft: '20px'}}>Background</span></Button>\r\n            </div>\r\n        )\r\n    }\r\n    function requestAnswered(user, isFriend){\r\n        const index = requestReceived.findIndex(name=>user===name);\r\n        requestReceived.splice(index, 1);\r\n        setRequestEle(renderRequest())\r\n        if(isFriend){\r\n            console.log(requestReceived.length)\r\n        } \r\n    }\r\n    function renderRequest(){\r\n        if(!requestReceived.length){\r\n            return(<h6 style={{width: '100%', textAlign: \"center\", color: '#aaa', marginTop: '10px'}}>No results</h6>)\r\n        }\r\n        return (requestReceived.map(user=>(\r\n            <div key={'request'+user}style={{ paddingLeft: '30px',  borderTop: 'white 1px solid', height: '42px'}}>\r\n                <span style={{fontSize: '20px', position: 'relative'}}>{user} </span>\r\n                <button onClick={()=>{requestAnswered(user, false)}} className='no'  color='info' style={{color: 'red',  background: 'transparent', float: 'right', marginLeft: '10px', border: 'none'}}><FaTimes size={'20px'}/></button >\r\n                <button onClick={()=>{requestAnswered(user, true)}} className='yes'  color=\"info\" style={{color: 'green', background: 'transparent', float: 'right', border: 'none'}}><FaCheck size={'20px'}/></button > \r\n            </div>))\r\n        )\r\n    }\r\n    function switch_to_chat(){\r\n        setActive('chat');\r\n        setChatPanel(renderChatPanel(lastUser));\r\n\r\n    }\r\n    function hashBg(photo){\r\n        switch(photo){\r\n            case'Aurora':\r\n                return aurora\r\n            case'Bridge':\r\n                return bridge\r\n            case'City':\r\n                return city\r\n            case'Forest':\r\n                return forest\r\n            case'Prairie':\r\n                return prairie\r\n            case'Road':\r\n                return road\r\n            case'Sakura':\r\n                return sakura\r\n            case'Sea':\r\n                return sea\r\n            default: \r\n        }\r\n    }\r\n    function renderBackground(){\r\n        return(\r\n        <div style={{width: '100%', height: '100%', overflow: 'scroll'}}>\r\n            <button style={{background: 'transparent', fontSize:'32px', marginLeft: '10px'}} className='chat-btn' onClick={()=>{ setChatPanel(renderSetting())}}><FaArrowAltCircleLeft/></button>\r\n            <div style={{height: '90%', width: '80%', marginTop: '2%', marginLeft: '10%'}}>\r\n                {bg_photo.map(photo=>(<div key={photo} style={{width: '100%', marginBottom: '20px'}}>\r\n                    <button className='bg-btn' onClick={()=>{setBackground(photo)}} \r\n                    id={photo}></button>\r\n                    <h5 style={{margin:\"auto\", textAlign: 'center'}}>{photo}</h5>\r\n                </div>))}\r\n            </div>\r\n        </div>\r\n        )\r\n    }\r\n    function renderFile(){\r\n        return(\r\n            <div onMouseMove={(e)=>{\r\n                let x = (window.innerWidth/2+180-e.pageX)/10;\r\n                let y = (window.innerHeight/2-e.pageY)/10;\r\n                document.getElementById('card').style.transform = `rotateY(${x}deg) rotateX(${y}deg)`\r\n            }} \r\n            onMouseLeave={(e)=>{\r\n                \r\n                document.getElementById('card').style.transform = `rotateY(${0}deg) rotateX(${0}deg)`\r\n            }}\r\n            style={{display: 'flex', flexDirection: 'column', height: '100%', perspective: '1000px'}}>\r\n                <div id='card' style={{margin: 'auto', height: '90%', width: '80%',border: 'white 1px solid'}}>\r\n                    <button style={{background: 'transparent', fontSize:'32px', marginLeft: '10px'}} className='chat-btn' onClick={()=>{ setChatPanel(renderSetting())}}><FaArrowAltCircleLeft/></button>\r\n                    <button style={{background: 'transparent', fontSize:'32px', marginRight: '10px', float: 'right'}} className='chat-btn' onClick={()=>{ alert('a')}}><FaEdit/></button>\r\n                    <div style={{margin: 'auto', width: '100px', height: '100px', background: 'yellow', backgroundSize: 'cover', backgroundPosition: 'center', borderRadius: '50%'}}></div>\r\n                    <h5 style={{margin: 'auto', textAlign: 'center', marginTop: '25px'}}>user name</h5>\r\n                    <h5 style={{margin: 'auto', textAlign: 'center', marginTop: '25px'}}>email address</h5>\r\n                    <p style={{margin: 'auto', textAlign: 'center', paddingTop: '50px'}}>\r\n                        I am who I am. It is what it is.\r\n                    </p>\r\n                </div>\r\n            </div>)\r\n    }\r\n    function renderPassword(){\r\n        return(\r\n            <div style={{width: '100%', height: '100%', overflow: 'scroll'}}>\r\n                <button style={{background: 'transparent', fontSize:'32px', marginLeft: '10px'}} className='chat-btn' onClick={()=>{ setChatPanel(renderSetting())}}><FaArrowAltCircleLeft/></button>\r\n                <Input style={{marginTop: '70px'}} type=\"password\" name=\"password\" className=\"setting-password search\" placeholder={language==='English'? \"old password\": 'パスワード'} />\r\n                <Input type=\"password\" name=\"password\" className=\"setting-password search\" placeholder={language==='English'? \"new password\": 'パスワード'} />\r\n                <Input type=\"password\" name=\"password\" className=\"setting-password search\"  placeholder={language==='English'? \"confirm password\": 'パスワード'} />\r\n                <Button id='ps-submit' outline color='success'>submit</Button>\r\n            </div>\r\n        )\r\n    }\r\n    function renderLanguage(){\r\n        let usa_x = Math.floor(Math.random()*38)*10 - 60;\r\n        let usa_y = Math.floor(Math.random()*52)*10;\r\n        \r\n        let japan_x = Math.floor(Math.random()*38)*10;\r\n        let japan_y = Math.floor(Math.random()*52)*10;\r\n\r\n        // 0-> right up 1-> right down 2-> left up 3-> left down \r\n        let usa_direction = Math.floor(Math.random()*4);\r\n        let japan_direction = Math.floor(Math.random()*4);\r\n        while(usa_direction===japan_direction){\r\n            japan_direction = Math.floor(Math.random()*4);\r\n        }\r\n\r\n        function update(){\r\n            const japan = document.getElementById('japn-ball');\r\n            const usa = document.getElementById('usa-ball');\r\n            if(!japan){\r\n                clearInterval(interval);\r\n                return\r\n            }\r\n            let x = japan_x;\r\n            let y = japan_y;\r\n            switch(japan_direction){\r\n                case 0:\r\n                    x+=10; y-=10;\r\n                    if(x>380&&y<0){\r\n                        japan_direction = 3;\r\n                        japan_x -= 10;\r\n                        japan_y+=10;\r\n                    } else if(x>380){\r\n                        japan_direction = 2;\r\n                        japan_x -= 10;\r\n                        japan_y=y\r\n                    } else if(y<0){\r\n                        japan_direction = 1;\r\n                        japan_y+=10;\r\n                        japan_x = x\r\n                    } else {\r\n                        japan_x = x;\r\n                        japan_y = y;\r\n                    }\r\n                    break\r\n                case 1:\r\n                    x+=10; y+=10;\r\n                    if(x>380&&y>520){\r\n                        japan_direction = 2;\r\n                        japan_x-=10;\r\n                        japan_y-=10;\r\n                    } else if(x>380){\r\n                        japan_direction = 3;\r\n                        japan_x-=10;\r\n                        japan_y=y\r\n                    } else if(y>520){\r\n                        japan_direction = 0;\r\n                        japan_y-=10;\r\n                        japan_x = x\r\n                    } else {\r\n                        japan_x = x;\r\n                        japan_y = y;\r\n                    }\r\n                    break\r\n                case 2:\r\n                    x-=10; y-=10;\r\n                    if(x<0&&y<0){\r\n                        japan_direction = 1;\r\n                        japan_x+=10;\r\n                        japan_y+=10;\r\n                    } else if(x<0){\r\n                        japan_direction = 0;\r\n                        japan_x+=10;\r\n                        japan_y=y\r\n                        \r\n                    } else if(y<0){\r\n                        japan_direction = 3;\r\n                        japan_y+=10;\r\n                        japan_x = x\r\n                    } else {\r\n                        japan_x = x;\r\n                        japan_y = y;\r\n                    }\r\n                    break\r\n                default:\r\n                    x-=10; y+=10;\r\n                    if(x<0&&y>520){\r\n                        japan_direction = 0;\r\n                        japan_x+=10;\r\n                        japan_y-=10;\r\n                    } else if(x<0){\r\n                        japan_direction = 1;\r\n                        japan_x+=10;\r\n                        japan_y=y\r\n                    } else if(y>520){\r\n                        japan_direction = 2;\r\n                        japan_y-=10;\r\n                        japan_x = x\r\n\r\n                    } else {\r\n                        japan_x = x;\r\n                        japan_y = y;\r\n                    }\r\n            }\r\n            x = usa_x;\r\n            y = usa_y;\r\n            switch(usa_direction){\r\n                case 0:\r\n                    x+=10; y-=10;\r\n                    if(x>320&&y<0){\r\n                        usa_direction = 3;\r\n                        usa_x -= 10;\r\n                        usa_y+=10;\r\n                    } else if(x>320){\r\n                        usa_direction = 2;\r\n                        usa_x -= 10;\r\n                        usa_y=y\r\n                    } else if(y<0){\r\n                        usa_direction = 1;\r\n                        usa_y+=10;\r\n                        usa_x = x\r\n                    } else {\r\n                        usa_x = x;\r\n                        usa_y = y;\r\n                    }\r\n                    break\r\n                case 1:\r\n                    x+=10; y+=10;\r\n                    if(x>320&&y>520){\r\n                        usa_direction = 2;\r\n                        usa_x-=10;\r\n                        usa_y-=10;\r\n                    } else if(x>320){\r\n                        usa_direction = 3;\r\n                        usa_x-=10;\r\n                        usa_y=y\r\n                    } else if(y>520){\r\n                        usa_direction = 0;\r\n                        usa_y-=10;\r\n                        usa_x = x\r\n                    } else {\r\n                        usa_x = x;\r\n                        usa_y = y;\r\n                    }\r\n                    break\r\n                case 2:\r\n                    x-=10; y-=10;\r\n                    if(x<-60&&y<0){\r\n                        usa_direction = 1;\r\n                        usa_x+=10;\r\n                        usa_y+=10;\r\n                    } else if(x<-60){\r\n                        usa_direction = 0;\r\n                        usa_x+=10;\r\n                        usa_y=y\r\n                        \r\n                    } else if(y<0){\r\n                        usa_direction = 3;\r\n                        usa_y+=10;\r\n                        usa_x = x\r\n                    } else {\r\n                        usa_x = x;\r\n                        usa_y = y;\r\n                    }\r\n                    break\r\n                default:\r\n                    x-=10; y+=10;\r\n                    if(x<-60&&y>520){\r\n                        usa_direction = 0;\r\n                        usa_x+=10;\r\n                        usa_y-=10;\r\n                    } else if(x<-60){\r\n                        usa_direction = 1;\r\n                        usa_x+=10;\r\n                        usa_y=y\r\n                    } else if(y>520){\r\n                        usa_direction = 2;\r\n                        usa_y-=10;\r\n                        usa_x = x\r\n\r\n                    } else {\r\n                        usa_x = x;\r\n                        usa_y = y;\r\n                    }\r\n            }\r\n            japan.style.left = japan_x + 'px';\r\n            japan.style.top = japan_y + 'px';\r\n            usa.style.left = usa_x + 'px';\r\n            usa.style.top = usa_y + 'px';\r\n        }\r\n        const interval = setInterval(update, 100);\r\n        return(\r\n            <div style={{width: '100%', height: '100%', overflow: 'scroll'}}>\r\n                <button style={{background: 'transparent', fontSize:'32px', marginLeft: '10px', position: 'absolute', zIndex:'10'}} className='chat-btn' onClick={()=>{ clearInterval(interval);setChatPanel(renderSetting()); }}><FaArrowAltCircleLeft/></button>\r\n                <div style={{width: '100%', height: '100%'}}>\r\n                    <button style={{left: japan_x, top: japan_y, zIndex: '2'}} onClick={()=>{ dispatch(cover_sign_language('Japanese'));setChatPanel(renderSetting()); clearInterval(interval); }} id='japn-ball' className='ball'></button>\r\n                    <button style={{left: usa_x, top: usa_y, zIndex: '2'}} onClick={()=>{dispatch(cover_sign_language('English'));setChatPanel(renderSetting()); clearInterval(interval);}} id='usa-ball' className='ball'></button>\r\n                    <h4 style={{position: 'relative', top: '36%', width: '100%', textAlign: 'center'}}>Choose your language</h4>\r\n                </div>\r\n            </div>)\r\n    }\r\n    function switch_to_setting(){\r\n        setActive('setting');\r\n        \r\n        setChatPanel(renderSetting())\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className='homepage' style={{backgroundImage: `url(${hashBg(background)})`}}>\r\n            <div className='shadow'></div>\r\n            \r\n            {width>=800?\r\n                (<div className='chat-window'> \r\n                    <nav className='navbar'>\r\n                        <button onClick={switch_to_chat} className='chat-btn' id='chat'><FaComment size={28} style={{color: active==='chat'? 'rgb(91, 226, 79)': ''}}/></button>\r\n                        <button onClick={switch_to_setting} className='chat-btn' id='setting'><FaCog size={28} style={{color: active==='setting'? 'rgb(91, 226, 79)': ''}}/></button>\r\n                        <button onClick={()=>{setLogoutWindow(!logoutWindow)}} className='chat-btn' id='logout'><FaSignOutAlt size={28} /></button>\r\n                    </nav>\r\n                    \r\n                    <div className='main-interface'>\r\n                        <div className='middle'>\r\n                            <div className='mid-header'>\r\n                                <InputGroup className='search-container'>\r\n                                    <InputGroupAddon addonType=\"prepend\">\r\n                                        <InputGroupText><FaSearch size={16}/></InputGroupText>\r\n                                    </InputGroupAddon>\r\n                                    <Input className='search' placeholder=\"Search\" onChange={(e)=>{e.preventDefault();e.stopPropagation();e.nativeEvent.stopImmediatePropagation();setChatList(renderChatList(e.target.value))}}/>\r\n                                </InputGroup>\r\n                                <button onClick={()=>{setFriendWindow(!friendWindow)}} className='chat-btn' id='w-add'><FaPlus size={28} /></button>\r\n\r\n                            </div>\r\n                            <div style={{height: '88%', overflow: 'scroll', overflowX: 'hidden'}}>\r\n                                <div style={{borderBottom: 'white 1px solid'}}>\r\n                                    <h5 style={{textAlign: 'center'}}>Friend Request</h5>\r\n                                    {requestEle}\r\n                                    <br></br>\r\n                                </div>\r\n                                \r\n                                {chatList}\r\n                            </div>\r\n                        </div>\r\n                        <div className='right'>\r\n                            \r\n                            {chatPanel}\r\n                        </div>\r\n                    </div>\r\n                </div>): \r\n                // mobile screen\r\n                <div className='chat-mobile'>\r\n                    <div className='m-header'>\r\n                        <button className='chat-btn' id='m-add'><FaPlus size={28} /></button>\r\n                    </div>\r\n                    <div className='m-content'>\r\n                        {mobile_state==='chat'?\r\n                            <div className='part'>1</div>:\r\n                            mobile_state==='friends'?\r\n                            <div className='part'>2</div>:\r\n                            <div className='part'>3</div>\r\n                        }\r\n                        {/* <CSSTransition\r\n                            in={mobile_state === 'chat'}\r\n                            timeout={500}\r\n                            classNames=\"menu-primary\"\r\n                            unmountOnExit>\r\n                                <div className='part'>1</div>\r\n                        </CSSTransition>\r\n                        <CSSTransition\r\n                            in={mobile_state === 'friends'}\r\n                            timeout={500}\r\n                            classNames=\"menu-secondary\"\r\n                            unmountOnExit>\r\n                                <div className='part'>2</div>\r\n                        </CSSTransition> */}\r\n                    </div>\r\n                    <div className='m-navbar'>\r\n                        <button onClick={()=>{setMobileState('chat')}} className='chat-btn' id='chat'><FaComment size={28} style={{color: active==='chat'? 'rgb(91, 226, 79)': ''}}/></button>\r\n                        <button onClick={()=>{setMobileState('friends')}} className='chat-btn' id='friends'><FaUserFriends size={28} style={{color: active==='friends'? 'rgb(91, 226, 79)': ''}}/></button>\r\n                        <button onClick={()=>{setMobileState('file')}} className='chat-btn' id='profile'><FaUserCircle size={28} style={{'color':'white'}}/></button>\r\n                    </div>\r\n                </div>\r\n            }\r\n            \r\n            <Modal isOpen={logoutWindow} toggle={()=>{setLogoutWindow(!logoutWindow)}} style={{position: 'relative', top: '100px'}}>\r\n                <ModalHeader style={{textAlign: 'center'}} >You want to log out now?</ModalHeader>\r\n                \r\n                <ModalFooter>\r\n                    <Button color=\"primary\" onClick={()=>{setLogoutWindow(!logoutWindow)}}>Confirm</Button>\r\n                    <Button color=\"secondary\" onClick={()=>{setLogoutWindow(!logoutWindow)}}>Cancel</Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n            <Modal isOpen={friendWindow} toggle={()=>{setFriendWindow(!friendWindow)}} style={{position: 'relative', top: '100px', width: '300px'}}>\r\n                <ModalHeader style={{textAlign: 'center'}} >Search user by name</ModalHeader>\r\n                <Input type='text' style={{width: '90%', marginLeft: '10px', marginTop: '5px'}} onChange={(e)=>{\r\n                    const regex = new RegExp(`^${e.target.value}`, 'gi');\r\n                    setRes(allUsers.filter(user=>user.match(regex)));\r\n                }}></Input>\r\n                <p style={{paddingLeft: '5px'}}>Notice: Your friends and users you have sent request will not be displayed here</p>\r\n                <div style={{height: '200px', overflow: 'scroll'}}>\r\n                    {res.filter(user=>!friends.includes(user)&&!requestSent.includes(user)).map(user=><div key={'add_'+user} style={{height: '50px', paddingTop: '5px'}}>\r\n                        <span style={{fontSize: '20px', marginLeft: '10px', marginTop: '3px'}}>{user}</span>\r\n                        <Button outline color='info' style={{float: 'right', marginRight: '5px'}}>send</Button>\r\n                    </div>)}\r\n                </div>\r\n                \r\n            </Modal>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Demo;","C:\\Users\\hhp12\\Desktop\\chat-app\\client\\src\\pages\\components\\Card.js",[],"C:\\Users\\hhp12\\Desktop\\chat-app\\client\\src\\pages\\components\\ChatPanel.js",[],"C:\\Users\\hhp12\\Desktop\\chat-app\\client\\src\\pages\\components\\Setting.js",[],"C:\\Users\\hhp12\\Desktop\\chat-app\\client\\src\\pages\\components\\Language.js",[],"C:\\Users\\hhp12\\Desktop\\chat-app\\client\\src\\pages\\components\\Background.js",[],"C:\\Users\\hhp12\\Desktop\\chat-app\\client\\src\\pages\\components\\Password.js",[],{"ruleId":"123","replacedBy":"124"},{"ruleId":"125","replacedBy":"126"},{"ruleId":"127","severity":1,"message":"128","line":4,"column":11,"nodeType":"129","messageId":"130","endLine":4,"endColumn":16},{"ruleId":"127","severity":1,"message":"131","line":4,"column":18,"nodeType":"129","messageId":"130","endLine":4,"endColumn":29},{"ruleId":"127","severity":1,"message":"132","line":4,"column":31,"nodeType":"129","messageId":"130","endLine":4,"endColumn":36},{"ruleId":"127","severity":1,"message":"133","line":4,"column":37,"nodeType":"129","messageId":"130","endLine":4,"endColumn":43},{"ruleId":"127","severity":1,"message":"134","line":5,"column":9,"nodeType":"129","messageId":"130","endLine":5,"endColumn":13},{"ruleId":"127","severity":1,"message":"135","line":6,"column":22,"nodeType":"129","messageId":"130","endLine":6,"endColumn":33},{"ruleId":"127","severity":1,"message":"136","line":7,"column":9,"nodeType":"129","messageId":"130","endLine":7,"endColumn":28},{"ruleId":"127","severity":1,"message":"137","line":10,"column":11,"nodeType":"129","messageId":"130","endLine":10,"endColumn":19},{"ruleId":"138","severity":2,"message":"139","line":10,"column":22,"nodeType":"129","endLine":10,"endColumn":33},{"ruleId":"127","severity":1,"message":"137","line":4,"column":12,"nodeType":"129","messageId":"130","endLine":4,"endColumn":20},{"ruleId":"127","severity":1,"message":"140","line":4,"column":22,"nodeType":"129","messageId":"130","endLine":4,"endColumn":33},{"ruleId":"138","severity":2,"message":"141","line":4,"column":37,"nodeType":"129","endLine":4,"endColumn":45},{"ruleId":"123","replacedBy":"142"},{"ruleId":"125","replacedBy":"143"},{"ruleId":"123","replacedBy":"144"},{"ruleId":"125","replacedBy":"145"},{"ruleId":"127","severity":1,"message":"146","line":25,"column":13,"nodeType":"129","messageId":"130","endLine":25,"endColumn":15},{"ruleId":"127","severity":1,"message":"147","line":1,"column":26,"nodeType":"129","messageId":"130","endLine":1,"endColumn":35},{"ruleId":"127","severity":1,"message":"148","line":3,"column":108,"nodeType":"129","messageId":"130","endLine":3,"endColumn":116},{"ruleId":"127","severity":1,"message":"149","line":3,"column":118,"nodeType":"129","messageId":"130","endLine":3,"endColumn":144},{"ruleId":"127","severity":1,"message":"134","line":4,"column":9,"nodeType":"129","messageId":"130","endLine":4,"endColumn":13},{"ruleId":"127","severity":1,"message":"150","line":5,"column":10,"nodeType":"129","messageId":"130","endLine":5,"endColumn":23},{"ruleId":"127","severity":1,"message":"151","line":55,"column":58,"nodeType":"129","messageId":"130","endLine":55,"endColumn":70},{"ruleId":"127","severity":1,"message":"152","line":56,"column":19,"nodeType":"129","messageId":"130","endLine":56,"endColumn":23},{"ruleId":"127","severity":1,"message":"153","line":92,"column":12,"nodeType":"129","messageId":"130","endLine":92,"endColumn":23},{"ruleId":"127","severity":1,"message":"154","line":94,"column":12,"nodeType":"129","messageId":"130","endLine":94,"endColumn":17},{"ruleId":"127","severity":1,"message":"147","line":1,"column":26,"nodeType":"129","messageId":"130","endLine":1,"endColumn":35},{"ruleId":"127","severity":1,"message":"155","line":3,"column":10,"nodeType":"129","messageId":"130","endLine":3,"endColumn":21},{"ruleId":"127","severity":1,"message":"148","line":3,"column":175,"nodeType":"129","messageId":"130","endLine":3,"endColumn":183},{"ruleId":"127","severity":1,"message":"149","line":3,"column":185,"nodeType":"129","messageId":"130","endLine":3,"endColumn":211},{"ruleId":"127","severity":1,"message":"134","line":4,"column":9,"nodeType":"129","messageId":"130","endLine":4,"endColumn":13},{"ruleId":"127","severity":1,"message":"150","line":5,"column":10,"nodeType":"129","messageId":"130","endLine":5,"endColumn":23},{"ruleId":"127","severity":1,"message":"156","line":9,"column":8,"nodeType":"129","messageId":"130","endLine":9,"endColumn":13},"no-native-reassign",["157"],"no-negated-in-lhs",["158"],"no-unused-vars","'Modal' is defined but never used.","Identifier","unusedVar","'ModalHeader' is defined but never used.","'Input' is defined but never used.","'Button' is defined but never used.","'Link' is defined but never used.","'useDispatch' is defined but never used.","'cover_sign_language' is defined but never used.","'language' is assigned a value but never used.","react-hooks/rules-of-hooks","React Hook \"useSelector\" is called in function \"sign\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter.","'setLanguage' is assigned a value but never used.","React Hook \"useState\" is called in function \"coverpage\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter.",["157"],["158"],["157"],["158"],"'id' is assigned a value but never used.","'useEffect' is defined but never used.","'FaCircle' is defined but never used.","'FaAcquisitionsIncorporated' is defined but never used.","'CSSTransition' is defined but never used.","'chatReceived' is assigned a value but never used.","'icon' is assigned a value but never used.","'description' is assigned a value but never used.","'email' is assigned a value but never used.","'FaUserSlash' is defined but never used.","'axios' is defined but never used.","no-global-assign","no-unsafe-negation"]